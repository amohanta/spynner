#summary Basic information about spynner.
#labels Featured,Phase-Design
= Introduction =

Spynner is a programmatic web browser module for Python. It is based upon the [http://trac.webkit.org/wiki/QtWebKit PyQtWebKit] framework, so it supports Javascript, AJAX, and every other technology that Webkit can handle. 

[http://webkit.org/ WebKit] is an open-source web browser layout engine originally derived by Apple Inc. from the Konqueror browser’s KHTML software library for use as the engine of Mac OS X’s Safari web browser and has now been further developed by individuals from the KDE project, Apple Inc., Nokia, Google, Torch Mobile and others.

Using spynner you would able to simulate a web browser from Python with no GUI (though a browser window can be opened for debugging purposes). Spynner may be used to implement crawlers and test websites.

= Install =

  * A release version (recommended):

{{{
$ wget http://spynner.googlecode.com/files/spynner-VERSION.tgz
$ tar xvzf spynner-VERSION.tgz
$ cd spynner-VERSION
$ sudo python setup.py install
}}}

or 

{{{
$ sudo easy_install spynner
}}}

  * The bleeding edge version:

{{{
$ svn checkout http://spynner.googlecode.com/svn/trunk/ spynner-trunk
$ cd spynner-trunk
$ sudo python setup.py install
}}}

= Running Javascript = 

Spynner uses Jquery to make Javascript interface with pages easy. By default, two modules are injected to every loaded page:

  * [http://docs.jquery.com/Downloading_jQuery Jquery core]: Adds [http://docs.jquery.com/Selectors selectors]. They are used internally by spynner on some action methods (_fill_, _select_, _click_, _check_, ...) but of course you can also use it in you Javascript injection code.

  * [http://code.google.com/p/jqueryjs/source/browse/trunk/plugins/simulate Jquery simulate plugins]: Used to simulate mouse and keyboard events. Used internally by the _click_ action .

= Usage =

Basic example:

{{{
import spynner

browser = spynner.Browser(verbose_level=spynner.DEBUG)
browser.load("http://www.wordreference.com")
browser.select("#esen")
browser.fill("input[name=enit]", "hola")
browser.click("input[name=b]")
browser.runjs("console.log('I can run Javascript')")
html = browser.get_html()
}}}

Sometimes you'll want to see what is happening:

{{{
import spynner

browser = spynner.Browser(webview=True, verbose_level=spynner.DEBUG)
browser.show()
browser.load("http://www.wordreference.com")
browser.select("#esen")
browser.fill("input[name=enit]", "hola")
browser.click("input[name=b]")
}}}

See more examples of usage in the subversion repository: 

http://code.google.com/p/spynner/source/browse/#svn/trunk/examples

= Parsing the HTML = 

You can parse the HTML of a webpage with your favorite library ([http://www.crummy.com/software/BeautifulSoup BeautifulSoup], [http://codespeak.net/lxml/ lxml], ...). Since Jquery is already being used as Javascript library, it may feel natural to use the [http://pypi.python.org/pypi/pyquery pyquery], its (not still complete) Python equivalent:

{{{
import spynner
import pyquery

browser = spynner.Browser()
...
html = browser.get_html()
d = pyquery.Pyquery(html)
d.make_links_absolute(browser.get_url())
href = d("#somelink").attr("href")
browser.download(href, open("outputfile", "w"))
}}}

= Feedback =

Open an issue to reports a bug or a feature request. You can also email me: tokland AT gmail DOT com